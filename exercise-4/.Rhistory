# afford for $1,000
max_puppies <- 1
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- (puppies * puppy_price)
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- (puppies * puppy_price)
# Create a variable `hometown` that stores the city in which you were born
hometown <- GuangZhou
# Create a variable `hometown` that stores the city in which you were born
hometown <- "GuangZhou"
# Assign your name to the variable `my_name`
my_name <- "Kai"
# Assign your height (in inches) to a variable `my_height`
my_height <- 69
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- (total_cost < 1000)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- (puppy_price / puppies)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- (1000 / puppy_price)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- (1000 / puppy_price)
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- (total_cost > 1000)
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- (total_cost > 1000)
too_expensive
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000 / puppy_price)
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "GuangZhou"
# Assign your name to the variable `my_name`
my_name <- "Kai"
# Assign your height (in inches) to a variable `my_height`
my_height <- 69
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- (puppies * puppy_price)
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- (total_cost > 1000)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000 / puppy_price)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(1, 14)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 14)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(a, ee, fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
paste(lyric_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- c(intro, fruits_e)
paste(lyric_e)
print(lyric_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro, fruits_o)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
clear
n + 3
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(n) {
n + 3
}
add_three(5)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
ten
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
total_inches <- feet * 12 + inches
meters <- total_inches * 0.0254
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 9)
height_in_meters
"TRUE" == FALSE
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salaries_2018 <- salaries_2017 + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", c(1:100))
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salaries_2018, stringsAsFactors = FALSE)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
View(USPersonalExpenditure)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure_data <- data.frame(USPersonalExpenditure)
is.data.frame(USPersonalExpenditure_data)
View(USPersonalExpenditure_data)
# What are the column names of your dataframe?
USPersonalExpenditure_data[, 1]
# What are the column names of your dataframe?
USPersonalExpenditure_data[1,]
# What are the column names of your dataframe?
USPersonalExpenditure_data[0,]
# What are the column names of your dataframe?
USPersonalExpenditure_data[colnames(),]
# What are the column names of your dataframe?
colnames(USPersonalExpenditure_data)
$1940
# What are the row names of your dataframe?
row.names(USPersonalExpenditure_data)
# Add a column "category" to your data frame that contains the rownames
USPersonalExpenditure_data$category <- row.names(USPersonalExpenditure_data)
View(USPersonalExpenditure_data)
# How much money was spent on personal care in 1940?
USPersonalExpenditure_data["X1940"]$Personal_Care
# How much money was spent on personal care in 1940?
USPersonalExpenditure_data["X1940", "Personal_Care"]
# How much money was spent on personal care in 1940?
USPersonalExpenditure_data["X1940", "Personal Care"]
# How much money was spent on personal care in 1940?
USPersonalExpenditure_data["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
USPersonalExpenditure_data["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
max(USPersonalExpenditure_data[, "X1960"])
min(USPersonalExpenditure_data[, year])
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
min(USPersonalExpenditure_data[, year])
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
min(USPersonalExpenditure_data[, year])
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
lowest_category(1950)
min(USPersonalExpenditure_data[, c("X", year])
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
lowest_category(1950)
lowest_category(1950)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
lowest_category(1950)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
salaries
clear
q
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure_data <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure_data)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
row.names(USPersonalExpenditure_data)
# Add a column "category" to your data frame that contains the rownames
USPersonalExpenditure_data$category <- row.names(USPersonalExpenditure_data)
# How much money was spent on personal care in 1940?
USPersonalExpenditure_data["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
USPersonalExpenditure_data["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
max(USPersonalExpenditure_data[, "X1960"])
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
min(USPersonalExpenditure_data[, paste0("X", year])
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
lowest_category(1950)
min(USPersonalExpenditure_data[, paste0("X", year)]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure_data <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure_data)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
row.names(USPersonalExpenditure_data)
# Add a column "category" to your data frame that contains the rownames
USPersonalExpenditure_data$category <- row.names(USPersonalExpenditure_data)
# How much money was spent on personal care in 1940?
USPersonalExpenditure_data["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
USPersonalExpenditure_data["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
max(USPersonalExpenditure_data[, "X1960"])
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
min(USPersonalExpenditure_data[, paste0("X", year)]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure_data <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure_data)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
row.names(USPersonalExpenditure_data)
# Add a column "category" to your data frame that contains the rownames
USPersonalExpenditure_data$category <- row.names(USPersonalExpenditure_data)
# How much money was spent on personal care in 1940?
USPersonalExpenditure_data["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
USPersonalExpenditure_data["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
max(USPersonalExpenditure_data[, "X1960"])
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
lowest <- min(USPersonalExpenditure_data[, paste0("X", year)]
lowest
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
# What are the row names of your dataframe?
rownames(USPersonalExpenditure_data)
# What was the highest expenditure category in 1960?
max(USPersonalExpenditure_data[, "X1960"])
highest_1960 <- USPersonalExpenditure_data[USPersonalExpenditure_data$X1960 == max(USPersonalExpenditure_data$X1960)]
highest_1960
highest_1960 <- USPersonalExpenditure_data$category[USPersonalExpenditure_data$X1960 == max(USPersonalExpenditure_data$X1960)]
highest_1960
setwd("~/UW/2018 spring/info 201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grant <- read.csv(data/gates_money.csv, stringsAsFactors = F)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grant <- read.csv('data/gates_money.csv', stringsAsFactors = F)
# Use the View function to look at the loaded data
View(grant)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grant("organization")
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grant('organization')
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- data.frame(grant)['organization']
organization
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grant$organization
organization
grant$organization
data.frame(grant)['organization']
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean_value <- mean(grant$total_amount)
mean_value
# What was the dollar amount of the largest grant?
max_amount <- max(grant$total_amount)
# What was the dollar amount of the smallest grant?
min_amount <- min(grant$total_amount)
# Which organization received the largest grant?
max_receiver <- grant$organization(grant$total_amount == max_amount)
# Which organization received the largest grant?
max_receiver <- grant$organization(grant$total_amount == max_amount)
# Which organization received the largest grant?
max_receiver <- organization(grant$total_amount == max_amount)
# Which organization received the largest grant?
max_receiver <- organization[grant$total_amount == max_amount]
max_receiver
# Which organization received the smallest grant?
min_receiver <- organization[grant$total_amount == min_amount]
min_receiver
# How many grants were awarded in 2010?
grants_2010 <-
# How many grants were awarded in 2010?
grants_2010 <- grants$start_year[2010]
# How many grants were awarded in 2010?
grants_2010 <- grant$start_year[2010]
grants_2010
# How many grants were awarded in 2010?
grants_2010 <- grant$start_year(2010)
# How many grants were awarded in 2010?
grants_2010 <- length(start_year == '2010')
# How many grants were awarded in 2010?
grants_2010 <- length(start_year == '2010')
# How many grants were awarded in 2010?
grants_2010 <- length(grant$start_year == '2010')
grants_2010
# How many grants were awarded in 2010?
grants_2010 <- length(grant$start_year == 2010)
grants_2010
# How many grants were awarded in 2010?
grants_2010 <- length(grant$total_amount[grant$start_year == 2010])
grants_2010
# How many grants were awarded in 2010?
grants_2010 <- length(grant[grant$start_year == 2010])
# How many grants were awarded in 2010?
grants_2010 <- length(grant[grant$start_year == 2010],)
# How many grants were awarded in 2010?
grants_2010 <- length(grant[grant$start_year == 2010,])
grants_2010
# How many grants were awarded in 2010?
grants_2010 <- length(grant$total_amount[grant$start_year == 2010])
grants_2010
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grant <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grant)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grant$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean_value <- mean(grant$total_amount)
# What was the dollar amount of the largest grant?
max_amount <- max(grant$total_amount)
# What was the dollar amount of the smallest grant?
min_amount <- min(grant$total_amount)
# Which organization received the largest grant?
max_receiver <- organization[grant$total_amount == max_amount]
# Which organization received the smallest grant?
min_receiver <- organization[grant$total_amount == min_amount]
# How many grants were awarded in 2010?
grants_2010 <- length(grant$total_amount[grant$start_year == 2010])
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean_value <- mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max_amount <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min_amount <- min(grants$total_amount)
# Which organization received the largest grant?
max_receiver <- organization[grants$total_amount == max_amount]
# Which organization received the smallest grant?
min_receiver <- organization[grants$total_amount == min_amount]
# How many grants were awarded in 2010?
grants_2010 <- length(grants$total_amount[grants$start_year == 2010])
